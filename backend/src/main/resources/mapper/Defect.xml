<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.ktds.orchestra.mapper.DefectMapper">

    <select id="getDefectList" resultType="kr.co.ktds.orchestra.dto.defect.DefectList">
        <![CDATA[
            -- getDefectList (결함 리스트)
            with params as
            (
            select max(sr.project_id) project_id,
                   max(case sr.set_name when 'status.cancel' then sr.set_value end) status_cancel_id,
                   max(case sr.set_name when 'status.done' then sr.set_value end) status_done_id,
                   max(case sr.set_name when 'tracker_id.test' then sr.set_value end) test_id,
                   max(case sr.set_name when 'tracker_id.defect' then sr.set_value end) defect_id
              from (
                    select first_value(r.set_value) over (order by r.project_id)::integer curr_proj_id,
                           s.set_name,
                           r.project_id,
                           r.set_value as set_value
                      from or_set_bas s
                      left outer join or_prj_set_rel r
                        on (s.id = r.set_id)
                     where (s.set_name, s.is_project_dependent)
                        in (('project_id.current', false),
                            ('status.cancel', true),
                            ('status.done', true),
                            ('tracker_id.test', true),
                            ('tracker_id.defect', true)
                           )
                   ) sr
             where sr.curr_proj_id = sr.project_id
            )
            select (row_number() over()) as no
                  , sum.test_dgr
				 , sum.mdl_nm
				 , u.firstname as assigned
				 , acc_total
				 , acc_cmp
				 , case when coalesce(acc_cmp, 0) = 0 then 0
						else round(coalesce(acc_cmp, 0)::numeric / coalesce(acc_total, 1)::numeric * 100, 0) end as acc_cmp_rate
				 , week_total
				 , week_cmp
				 , case when coalesce(week_cmp, 0) = 0 then 0
						else round(coalesce(week_cmp, 0)::numeric / coalesce(week_total, 1)::numeric * 100, 0) end as week_cmp_rate
			  from
			  (
				select
					  base.test_dgr
					, base.mdl_nm
					, base.userid
					, count(case when base.start_date <= to_date(#{accDate}, 'YYYY-MM-DD') then base.id end) as acc_total -- 누적전체
					, count(case when base.start_date <= to_date(#{accDate}, 'YYYY-MM-DD')
								  and base.is_closed
								 then base.id end) as acc_cmp -- 누적완료
					, count(case when base.start_date <= to_date(#{endDate}, 'YYYY-MM-DD')
								  and base.due_date >= to_date(#{startDate}, 'YYYY-MM-DD')
								 then base.id end ) as week_total -- 주간전체
					, count(case when base.start_date <= to_date(#{endDate}, 'YYYY-MM-DD')
								  and base.due_date >= to_date(#{startDate}, 'YYYY-MM-DD')
								  and base.is_closed
								 then base.id end) as week_cmp -- 주간완료
				  from (
					select obj.name as test_dgr
					      , obj.trk_id as test_dgr_id
						  , ict.name as mdl_nm
						  , u.id as userid
						  , i.start_date
						  , i.due_date
						  , i.closed_on
						  , i.id
						  , ist.is_closed
					  from issues i
					  join (
							  select issues.id, trackers.id as trk_id, trackers.name, issues.parent_id
								from issues
								join trackers on issues.tracker_id = trackers.id
							   where 1=1
							     and (issues.project_id, issues.tracker_id)
				                  in (select project_id::integer, regexp_split_to_table(test_id, ',')::integer from params)		-- 테스트 단계(version)
						) obj on obj.id = i.parent_id
					  left outer join issue_categories ict on i.category_id = ict.id
					  left outer join issue_statuses ist on i.status_id = ist.id
					  left outer join users u on i.assigned_to_id = u.id
					 where 1=1
					   and (i.project_id, i.tracker_id)
					    in (select project_id::integer, defect_id::integer from params) -- 결함
					   and i.status_id not in (select regexp_split_to_table(status_cancel_id, ',')::integer from params) -- '취소' 상태 제외
					   and i.parent_id is not null
					   and i.assigned_to_id is not null
					   and i.category_id is not null
            ]]>
        <if test="testDgr != null and testDgr != ''">
            <![CDATA[
                       and obj.trk_id = #{testDgr}::numeric
                    ]]>
        </if>
        <![CDATA[
				) base
				group by base.test_dgr, base.mdl_nm, base.userid
                order by base.test_dgr asc, base.mdl_nm asc
			  ) sum
			  left outer join users u on sum.userid = u.id
			  where 1=1
        ]]>
        <if test='keyword != null'>
            <choose>
                <when test='region.equalsIgnoreCase("module")'>
                    <![CDATA[
                    and mdl_nm like '%'||#{keyword}||'%'
                ]]>
                </when>
                <when test='region.equalsIgnoreCase("assigned")'>
                    <![CDATA[
                    and u.firstname like '%'||#{keyword}||'%'
                ]]>
                </when>
                <when test='region.equalsIgnoreCase("all")'>
                    <![CDATA[
                    and (u.firstname like '%'||#{keyword}||'%'
                    or mdl_nm like '%'||#{keyword}||'%')
                ]]>
                </when>
                <otherwise>
                </otherwise>
            </choose>
        </if>

    </select>

    <select id="getCompleteStatus" resultType="kr.co.ktds.orchestra.dto.common.CompleteStatus">
        <![CDATA[
           --getCompleteStatus (결함 처리 완료 현황)
            with params as
            (
            select max(sr.project_id) project_id,
                   max(case sr.set_name when 'status.cancel' then sr.set_value end) status_cancel_id,
                   max(case sr.set_name when 'status.done' then sr.set_value end) status_done_id,
                   max(case sr.set_name when 'tracker_id.test' then sr.set_value end) test_id,
                   max(case sr.set_name when 'tracker_id.defect' then sr.set_value end) defect_id
              from (
                    select first_value(r.set_value) over (order by r.project_id)::integer curr_proj_id,
                           s.set_name,
                           r.project_id,
                           r.set_value --regexp_split_to_table(r.set_value, ',')::integer set_value
                      from or_set_bas s
                      left outer join or_prj_set_rel r
                        on (s.id = r.set_id)
                     where (s.set_name, s.is_project_dependent)
                        in (('project_id.current', false),
                            ('status.cancel', true),
                            ('status.done', true),
                            ('tracker_id.test', true),
                            ('tracker_id.defect', true)
                           )
                   ) sr
             where sr.curr_proj_id = sr.project_id
            )
            select status
                 , cnt
                 , total
                 , round(cnt/total::numeric * 100, 1) as ratio
                 , ids as id
             from
                (
                select s.name status
                         , count(s.name) as cnt
                         , sum(count(s.name)) over () as total
                         , string_agg(i.id::varchar, ',' order by i.id) ids
                      from issues i
                      left outer join issue_statuses s on i.status_id = s.id
                      inner join issues p on i.parent_id = p.id
                     where 1=1
                       and (i.project_id, i.tracker_id)
                        in (select project_id, regexp_split_to_table(defect_id, ',')::integer from params)
                       and i.status_id not in (select regexp_split_to_table(status_cancel_id, ',')::integer from params)
                       and i.start_date <= to_date(#{accDate}, 'YYYY-MM-DD')
                       and p.tracker_id in (select regexp_split_to_table(test_id, ',')::integer from params)
                       and i.parent_id is not null
					   and i.assigned_to_id is not null
					   and i.category_id is not null
                ]]>
        <if test="testDgr != '' and testDgr != null">
            <![CDATA[
                    and p.tracker_id = #{testDgr}::integer
                ]]>
        </if>
        <if test='keyword != null'>
            <choose>
                <when test='region.equalsIgnoreCase("module")'>
                    <![CDATA[
                            and i.category_id in (select id from issue_categories
						                           where name like '%'||#{keyword}||'%')
                ]]>
                </when>
                <when test='region.equalsIgnoreCase("assigned")'>
                    <![CDATA[
                            and i.assigned_to_id in (select id from users
                                                      where firstname like '%'||#{keyword}||'%')
                ]]>
                </when>
                <when test='region.equalsIgnoreCase("all")'>
                    <![CDATA[
                            and (i.category_id in (select id from issue_categories
						                           where name like '%'||#{keyword}||'%')
                                 or i.assigned_to_id in (select id from users
                                                      where firstname like '%'||#{keyword}||'%'))
                ]]>
                </when>
                <otherwise>
                </otherwise>
            </choose>
        </if>
        <![CDATA[
                     group by s.name
                     order by s.name
                ) obj
        ]]>
    </select>

    <select id="getModuleDefect" resultType="kr.co.ktds.orchestra.dto.common.ModuleStatus">
        <![CDATA[
        -- getModuleDefect (모듈별 결함 현황)
        with params as
        (
        select max(sr.project_id) project_id,
               max(case sr.set_name when 'status.cancel' then sr.set_value end) status_cancel_id,
               max(case sr.set_name when 'status.done' then sr.set_value end) status_done_id,
               max(case sr.set_name when 'tracker_id.test' then sr.set_value end) test_id,
               max(case sr.set_name when 'tracker_id.defect' then sr.set_value end) defect_id
          from (
                select first_value(r.set_value) over (order by r.project_id)::integer curr_proj_id,
                       s.set_name,
                       r.project_id,
                       r.set_value --regexp_split_to_table(r.set_value, ',')::integer set_value
                  from or_set_bas s
                  left outer join or_prj_set_rel r
                    on (s.id = r.set_id)
                 where (s.set_name, s.is_project_dependent)
                    in (('project_id.current', false),
                        ('status.cancel', true),
                        ('status.done', true),
                        ('tracker_id.test', true),
                        ('tracker_id.defect', true)
                       )
               ) sr
         where sr.curr_proj_id = sr.project_id
        ),
        base as (
        select c_id, c_name, s_id, s_name
          from (
                select c.id c_id, c.name c_name
                  from issue_categories c
                 where c.project_id = (select project_id from params)  -- 프로젝트아이디
                   and c.id in (select distinct category_id from issues
                        where tracker_id in (select regexp_split_to_table(defect_id, ',')::integer from params)
                        and category_id is not null)
               ) c
         cross join
               (
                 select w.status_id s_id, s.name s_name
                  from (
                        select w.new_status_id status_id
                          from workflows w
                         where w.tracker_id = (select regexp_split_to_table(defect_id, ',')::integer from params)  -- 테스트결함 트래커아이디
                         group by w.new_status_id
                       ) w
                 inner join issue_statuses s
                    on (w.status_id = s.id and w.status_id not in (select regexp_split_to_table(status_cancel_id, ',')::integer from params))
               ) s
        ),
        mosu as ( -- 테스트 케이스 id <-> 갯수
            select i.category_id, i.status_id,
                   count(i.id) as cnt,
                   string_agg(i.id::varchar, ',' order by i.id) as ids
            from issues i
           inner join issues p on i.parent_id = p.id
           where 1=1
             and (i.project_id, i.tracker_id)
              in (select project_id, regexp_split_to_table(defect_id, ',')::integer from params)
             and p.tracker_id in (select regexp_split_to_table(test_id, ',')::integer from params)
             and i.status_id != (select status_cancel_id::integer from params)
             and i.start_date <= to_date(#{endDate}, 'YYYY-MM-DD')
             and i.due_date >= to_date(#{startDate}, 'YYYY-MM-DD')
             and i.parent_id is not null
             and i.assigned_to_id is not null
             and i.category_id is not null
        ]]>
        <if test="testDgr != '' and testDgr != null">
            <![CDATA[
            and p.tracker_id = #{testDgr}::integer /*테스트차수*/
        ]]>
        </if>
        <if test='keyword != null'>
            <choose>
                <when test='region.equalsIgnoreCase("module")'>
                    <![CDATA[
                            and i.category_id in (select id from issue_categories
						                           where name like '%'||#{keyword}||'%')
                ]]>
                </when>
                <when test='region.equalsIgnoreCase("assigned")'>
                    <![CDATA[
                            and i.assigned_to_id in (select id from users
                                                      where firstname like '%'||#{keyword}||'%')
                ]]>
                </when>
                <when test='region.equalsIgnoreCase("all")'>
                    <![CDATA[
                            and (i.category_id in (select id from issue_categories
						                           where name like '%'||#{keyword}||'%')
                                 or i.assigned_to_id in (select id from users
                                                      where firstname like '%'||#{keyword}||'%'))
                ]]>
                </when>
                <otherwise>
                </otherwise>
            </choose>
        </if>
        <![CDATA[
            group by i.category_id, i.status_id
        )
        select b.c_name as mdl_nm
             , b.s_name as status
             , coalesce(m.cnt , 0) as cnt
             , m.ids
          from base b
          left outer join mosu m
            on (b.s_id = m.status_id
               and b.c_id = m.category_id)
         order by b.c_id asc, b.s_id asc
        ]]>
    </select>

    <select id="getDefectDetail" resultType="kr.co.ktds.orchestra.dto.common.DetailModal">
        <![CDATA[
            -- getDefectDetail (결함 모달 팝업)
            with params as
            (
            select max(sr.project_id) project_id,
                   max(case sr.set_name when 'status.cancel' then sr.set_value end) status_cancel_id,
                   max(case sr.set_name when 'tracker_id.defect' then sr.set_value end) tracker_id,
                   max(case sr.set_name when 'custom_field_id.test_id' then sr.set_value end) testcase_id
              from (
                    select first_value(r.set_value) over (order by r.project_id)::integer curr_proj_id,
                           s.set_name,
                           r.project_id,
                           r.set_value as set_value
                      from or_set_bas s
                      left outer join or_prj_set_rel r
                        on (s.id = r.set_id)
                     where (s.set_name, s.is_project_dependent)
                        in (('project_id.current', false),
                            ('status.cancel', true),
                            ('tracker_id.defect', true),
                            ('custom_field_id.test_id', true)
                           )
                   ) sr
             where sr.curr_proj_id = sr.project_id
            )
            select (row_number() over()) as no
                  , i.id
				  , (select value from custom_values
					where custom_field_id =(select testcase_id::integer from params where customized_id = i.id)) as case_id
                  , obj.name as trk_nm
                  , i.subject
                  , u.firstname as assignee
                  , i.start_date
                  , i.due_date as end_date
                  , to_char(i.closed_on,'yyyy-mm-dd') as closed_date
                  , ist.name as status
              from issues i
              join issue_statuses ist on i.status_id = ist.id
              join trackers       on i.tracker_id = trackers.id
              join users  u       on i.assigned_to_id = u.id
              join issue_categories ict on i.category_id = ict.id
              join (
                    select issues.id, trackers.name, trackers.id as tracker_id from issues
                      join trackers on issues.tracker_id = trackers.id
                     where 1=1
                       and issues.project_id = (select project_id::integer from params)
                       and trackers.name = #{testDgr}
              ) obj
              on obj.id = i.parent_id
             where 1=1
               and (i.project_id, i.tracker_id)
                in (select project_id::integer, tracker_id::integer from params) -- 결함
               and i.status_id not in (select regexp_split_to_table(status_cancel_id, ',')::integer from params) -- '취소' 상태 제외
               and i.parent_id is not null
               and i.assigned_to_id is not null
               and i.category_id is not null
        ]]>
        <if test="status == 'total'">
            <if test="type == 'acc'">
                <![CDATA[
                -- 누적전체
                and i.start_date <= to_date(#{accDate}, 'YYYY-MM-DD')
            ]]>
            </if>
            <if test="type == 'week'">
                <![CDATA[
                -- 주간전체
                and i.start_date <= to_date(#{endDate}, 'YYYY-MM-DD')
                and i.due_date >= to_date(#{startDate}, 'YYYY-MM-DD')
            ]]>
            </if>
        </if>

        <if test="status == 'complete'">
            <![CDATA[
            and ist.is_closed = true
        ]]>
            <if test="type == 'acc'">
                <![CDATA[
                -- 누적완료
                and i.start_date <= to_date(#{accDate}, 'YYYY-MM-DD')
            ]]>
            </if>
            <if test="type == 'week'">
                <![CDATA[
                -- 주간완료
                and i.start_date <= to_date(#{endDate}, 'YYYY-MM-DD')
                and i.due_date >= to_date(#{startDate}, 'YYYY-MM-DD')
            ]]>
            </if>
        </if>

        <if test="module != null and module != ''">
            <![CDATA[
                and ict.name = #{module}
            ]]>
        </if>
        <if test="assignee != null and assignee != ''">
            <![CDATA[
                and u.firstname like '%'||#{assignee}||'%'
            ]]>
        </if>
    </select>

    <select id="getDefectAssigneeStatus" resultType="kr.co.ktds.orchestra.dto.defect.DefectAssigneeStatus">
        <![CDATA[
            -- getDefectAssigneeStatus (개발자별 결함 진행 진척)
            with params as
            (
            select max(sr.project_id) project_id,
                   max(case sr.set_name when 'status.cancel' then sr.set_value end) status_cancel_id,
                   max(case sr.set_name when 'status.done' then sr.set_value end) status_done_id,
                   max(case sr.set_name when 'tracker_id.test' then sr.set_value end) test_id,
                   max(case sr.set_name when 'tracker_id.defect' then sr.set_value end) defect_id
              from (
                    select first_value(r.set_value) over (order by r.project_id)::integer curr_proj_id,
                           s.set_name,
                           r.project_id,
                           r.set_value --regexp_split_to_table(r.set_value, ',')::integer set_value
                      from or_set_bas s
                      left outer join or_prj_set_rel r
                        on (s.id = r.set_id)
                     where (s.set_name, s.is_project_dependent)
                        in (('project_id.current', false),
                            ('status.cancel', true),
                            ('status.done', true),
                            ('tracker_id.test', true),
                            ('tracker_id.defect', true)
                           )
                   ) sr
             where sr.curr_proj_id = sr.project_id
            )
            select row_number() over (order by coalesce(d.remain, 0) desc) as no,
                   m.firstname assigned,
                   coalesce(d.done, 0) completion_count,
                   coalesce(d.remain, 0) remain_count,
                   d.done_ids,
                   d.remain_ids
              from (
                    select u.id, u.firstname
                      from members m
                     inner join users u
                        on (m.user_id = u.id)
                     where m.project_id = (select project_id from params)
                   ) m
              left outer join
                   (
                    select g.assigned_to_id,
                           count(done) done,
                           count(remain) remain,
                           string_agg(done::varchar, ',' order by g.id) done_ids,
                           string_agg(remain::varchar, ',' order by g.id) remain_ids
                      from (
                            select i.assigned_to_id, i.id,
                                   case when i.closed_on is not null and ist.is_closed
                                        then i.id end done,
                                   case when i.closed_on is null or ist.is_closed = false
                                        then i.id end remain
                              from issues i
                              left outer join issue_statuses ist
                                           on i.status_id = ist.id
             			  				  and i.status_id not in (select regexp_split_to_table(status_cancel_id, ',')::integer from params)
                              left outer join users u on i.assigned_to_id = u.id
                             inner join issues p on i.parent_id = p.id
                             where 1=1
                               and (i.project_id, i.tracker_id)
                                in (select project_id, regexp_split_to_table(defect_id, ',')::integer from params)
                               and i.status_id not in (select regexp_split_to_table(status_cancel_id, ',')::integer from params)
                               and p.tracker_id in (select regexp_split_to_table(test_id, ',')::integer from params)
                               and i.start_date <= to_date(#{endDate}, 'YYYY-MM-DD')
                               and i.due_date >= to_date(#{startDate}, 'YYYY-MM-DD')
                               and i.parent_id is not null
						  	   and i.assigned_to_id is not null
						       and i.category_id is not null
                               ]]>
        <if test="testDgr != '' and testDgr != null">
            <![CDATA[
                                and p.tracker_id = #{testDgr}::integer /*테스트차수*/
                        ]]>
        </if>
        <if test='keyword != null'>
            <choose>
                <when test='region.equalsIgnoreCase("module")'>
                    <![CDATA[
                                        and i.category_id in (select id from issue_categories
                                                               where name like '%'||#{keyword}||'%')
                            ]]>
                </when>
                <when test='region.equalsIgnoreCase("assigned")'>
                    <![CDATA[
                                        and i.assigned_to_id in (select id from users
                                                                  where firstname like '%'||#{keyword}||'%')
                            ]]>
                </when>
                <when test='region.equalsIgnoreCase("all")'>
                    <![CDATA[
                                        and (i.category_id in (select id from issue_categories
                                                               where name like '%'||#{keyword}||'%')
                                             or i.assigned_to_id in (select id from users
                                                                  where firstname like '%'||#{keyword}||'%'))
                            ]]>
                </when>
                <otherwise>
                </otherwise>
            </choose>
        </if>
        <![CDATA[
                           ) g
                     group by g.assigned_to_id
                   ) d
                on (m.id = d.assigned_to_id)
             -- limit 5
             where d.done > 0 or d.remain > 0
             order by completion_count desc, remain_count desc, assigned asc
            ]]>
    </select>

    <select id="getDailyStatus" resultType="kr.co.ktds.orchestra.dto.common.DailyStatus">
        <![CDATA[
        -- getDailyStatus (계획 대비 실적 일자별 결함현황 차트)
        with recursive copy_t(base_date)
        as (
            select to_date(#{startDate}, 'YYYY-MM-DD')
            union all
            select base_date + 1 from copy_t
            where base_date < to_date(#{endDate}, 'YYYY-MM-DD')
        ),
        params as
        (
        select max(sr.project_id) project_id,
               max(case sr.set_name when 'status.cancel' then sr.set_value end) status_cancel_id,
               max(case sr.set_name when 'status.done' then sr.set_value end) status_done_id,
               max(case sr.set_name when 'tracker_id.test' then sr.set_value end) test_id,
               max(case sr.set_name when 'tracker_id.defect' then sr.set_value end) defect_id
          from (
                select first_value(r.set_value) over (order by r.project_id)::integer curr_proj_id,
                       s.set_name,
                       r.project_id,
                       r.set_value --regexp_split_to_table(r.set_value, ',')::integer set_value
                  from or_set_bas s
                  left outer join or_prj_set_rel r
                    on (s.id = r.set_id)
                 where (s.set_name, s.is_project_dependent)
                    in (('project_id.current', false),
                        ('status.cancel', true),
                        ('status.done', true),
                        ('tracker_id.test', true),
                        ('tracker_id.defect', true)
                       )
               ) sr
         where sr.curr_proj_id = sr.project_id
        ),
        prgm
        as (
            select i.id, i.start_date,
                    case when i.closed_on is not null and s.is_closed
                         then i.closed_on::date end closed_date
              from issues i
             inner join issue_statuses s
                on (i.status_id = s.id)
             inner join issues p
                on (i.parent_id = p.id)
            where 1=1
              and (i.project_id, i.tracker_id)
               in (select project_id, regexp_split_to_table(defect_id, ',')::integer from params)
              and i.status_id not in (select regexp_split_to_table(status_cancel_id, ',')::integer from params)
              and i.start_date <= to_date(#{endDate}, 'YYYY-MM-DD') --  조회종료일자
              and i.parent_id is not null
			  and i.assigned_to_id is not null
			  and i.category_id is not null
          ]]>
        <if test="testDgr != '' and testDgr != null">
            <![CDATA[
            and p.tracker_id = #{testDgr}::integer
        ]]>
        </if>
        <if test='keyword != null'>
            <choose>
                <when test='region.equalsIgnoreCase("module")'>
                    <![CDATA[
                            and i.category_id in (select id from issue_categories
						                           where name like '%'||#{keyword}||'%')
                ]]>
                </when>
                <when test='region.equalsIgnoreCase("assigned")'>
                    <![CDATA[
                            and i.assigned_to_id in (select id from users
                                                      where firstname like '%'||#{keyword}||'%')
                ]]>
                </when>
                <when test='region.equalsIgnoreCase("all")'>
                    <![CDATA[
                            and (i.category_id in (select id from issue_categories
						                           where name like '%'||#{keyword}||'%')
                                 or i.assigned_to_id in (select id from users
                                                      where firstname like '%'||#{keyword}||'%'))
                ]]>
                </when>
                <otherwise>
                </otherwise>
            </choose>
        </if>
        <![CDATA[
        )
        select g.base_date,
               count(start_date) plan_cnt,
               count(case when closed_date <= base_date then 1 end) done_cnt,
               string_agg(g.id::varchar, ',' order by g.id) plan_list,
               string_agg(case when closed_date <= base_date
                               then g.id::varchar end, ',' order by g.id) done_list
          from (
                select lft.base_date, rgt.*
                  from copy_t lft
                  left outer join prgm rgt
                    on (rgt.start_date <= lft.base_date)
               ) g
         group by g.base_date
         order by g.base_date
        ]]>
    </select>

    <select id="getModuleList" resultType="hashmap">
        <![CDATA[
        --getModuleList
        with params as
        (
        select  max(sr.project_id) project_id,
			    max(case sr.set_name when 'tracker_id.defect' then sr.set_value end) tracker_id,
			    max(case sr.set_name when 'status.done' then sr.set_value end) status_done_id
          from (
                select first_value(r.set_value) over (order by r.project_id)::integer curr_proj_id,
                       s.set_name,
                       r.project_id,
                       r.set_value set_value
                  from or_set_bas s
                  left outer join or_prj_set_rel r
                    on (s.id = r.set_id)
                 where (s.set_name, s.is_project_dependent)
                    in (('project_id.current', false),
						('tracker_id.defect', true),
						('status.done', true)
                       )
               ) sr
         where sr.curr_proj_id = sr.project_id
        )
        select ict.name as mdl_nm
          from issues i
          join issue_categories ict on i.category_id = ict.id
        where 1=1
          and (i.project_id, i.tracker_id)
           in (select project_id::integer, regexp_split_to_table(tracker_id, ',')::integer from params)
          and i.parent_id is not null
          and i.assigned_to_id is not null
          and i.category_id is not null
        group by ict.name
        order by ict.name asc
        ]]>
    </select>
</mapper>
