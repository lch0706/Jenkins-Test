<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.ktds.orchestra.mapper.CommonMapper">
    <select id="getTestDegree" resultType="kr.co.ktds.orchestra.dto.common.TestDegree">
        <![CDATA[
        with params as
        (
        select case sr.set_name when 'tracker_id.test' then sr.set_value end tracker_id
          from (
                select first_value(r.set_value) over (order by r.project_id)::integer curr_proj_id,
                       s.set_name,
                       r.project_id,
                       regexp_split_to_table(r.set_value, ',')::integer set_value
                  from or_set_bas s
                  left outer join or_prj_set_rel r
                    on (s.id = r.set_id)
                 where (s.set_name, s.is_project_dependent)
                    in (('project_id.current', false),
                        ('tracker_id.test', true)
                       )
               ) sr
         where sr.curr_proj_id = sr.project_id
        )
        select trackers.name as testDgr, trackers.id as trackerId
          from trackers where trackers.id in (select * from params)
         order by trackers.name, trackers.id
        ]]>
    </select>

    <select id="getModuleList" resultType="kr.co.ktds.orchestra.dto.common.ModuleStatus">
        <![CDATA[
        --getModuleList
        with params as
        (
        select  max(sr.project_id) project_id,
                max(case sr.set_name when 'version.test' then sr.set_value end) version_id,
			    max(case sr.set_name when 'tracker_id.test' then sr.set_value end) tracker_id,
			    max(case sr.set_name when 'status.done' then sr.set_value end) status_done_id
          from (
                select first_value(r.set_value) over (order by r.project_id)::integer curr_proj_id,
                       s.set_name,
                       r.project_id,
                       r.set_value set_value
                  from or_set_bas s
                  left outer join or_prj_set_rel r
                    on (s.id = r.set_id)
                 where (s.set_name, s.is_project_dependent)
                    in (('project_id.current', false),
                        ('version.test', true),
						('tracker_id.test', true),
						('status.done', true)
                       )
               ) sr
         where sr.curr_proj_id = sr.project_id
        )
        select ict.name as mdl_nm
          from issues i
          join issue_categories ict on i.category_id = ict.id
        where 1=1
          and (i.project_id, i.fixed_version_id)
           in (select project_id::integer, version_id::integer from params)
       ]]>
        <if test="chart != '' and chart != null">
            <![CDATA[
                and i.tracker_id in (select regexp_split_to_table(tracker_id, ',')::integer from params)
                -- and (i.status_id, i.tracker_id)
                -- in (select status_done_id::integer, regexp_split_to_table(tracker_id, ',')::integer from params)
            ]]>
        </if>
        <if test="testDgr != '' and testDgr != null">
            <![CDATA[
                and i.tracker_id = #{testDgr}::integer /*테스트차수*/
            ]]>
        </if>
        <if test="state.equals('completed')">
            <![CDATA[
                and (i.status_id, i.tracker_id)
                 in (select status_done_id::integer, regexp_split_to_table(tracker_id, ',')::integer from params)
            ]]>
        </if>
        <![CDATA[
        group by ict.name
        order by ict.name asc
        ]]>
    </select>

    <select id="getProjectsList" resultType="kr.co.ktds.orchestra.dto.common.ProjectsList">
      <![CDATA[
      select p.id as project_id, p.name as project_name 
        from projects p
        join or_prj_set_rel opsr on p.id = opsr.project_id
      group by p.id, p.name
      ]]>
    </select>
</mapper>